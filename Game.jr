import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.event.KeyEvent;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.JFrame;

public class Game extends JPanel {
	
   private cap void (int) keyChar;
	private cap void (int) moveUser;
   
   private int resX;
	private int resY;
	private boolean inGame;
	private boolean paused;
	private boolean runMainLoop;
	
	private User user;
	private Map map;
	private Ghosts AI;
	
	public Game(int x, int y, cap void (int) ki) {
		keyChar = ki;
		resX = x;
		resY = y;
		initGame();
	}
	
	public void initGame() {
		inGame = false;
		paused = false;
      runMainLoop = true;
	   map = new Map(0,0,0);
      user = map.getUser();
      moveUser = user.getMoveOp();
      AI = map.getAI();
      send mainLoop();
	}
	
	public op void mainLoop() {
		while (runMainLoop) {

         if (inGame) {
            if (!paused) {
               user.play();
            }
			}
		
			repaint();
			try {
				Thread.sleep(40);
			} catch (Exception e) { e.printStackTrace(); }
	
		}
	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2d = ((Graphics2D)g);
		g2d.setColor(Color.black);
		g2d.fillRect(0, 0, resX, resY);
		
         //Render logic here for all objects (walls, items, ghosts, player) 
		for (Item[] oneD : map.getItems()) {
			for (Item item : oneD) {
				if (item != null)
					item.paint(g2d);
			}
		}

		if (inGame) {
			showScore(g2d);
        	user.paint(g2d);
         AI.paint(g2d);
      }
      else
      	showIntro(g2d);
	}
	
	
	public void showIntro(Graphics2D g2d) {
		Font large = new Font("SansSerif", Font.BOLD, 28);
		Font small = new Font("Monospaced", Font.PLAIN, 14);
		String s; 
		FontMetrics lmetr = g2d.getFontMetrics(large);
		FontMetrics smetr = g2d.getFontMetrics(small);

		// Title box
		g2d.setColor(new Color(0, 32, 48));
		g2d.fillRect(150, 150, resX-300, 100);
		g2d.setColor(Color.white);
		g2d.drawRect(150, 150, resX-300, 100);
		// Press Enter box
		g2d.setColor(new Color(0, 32, 48));
		g2d.fillRect(100, resY*3/4, resX - 200, 80);
		g2d.setColor(Color.white);
		g2d.drawRect(100, resY*3/4, resX - 200, 80);

		s = "Pac-Man"; 
		g2d.setFont(large);
		g2d.setColor(Color.white);
		g2d.drawString(s, (resX - lmetr.stringWidth(s)) / 2, 200);
		s = "in JR";
		g2d.setFont(small);
		g2d.drawString(s, (resX - smetr.stringWidth(s)) / 2, 220);



		s = "Press ENTER to start.";
		g2d.setColor(Color.white);
		g2d.setFont(small);
		g2d.drawString(s, (resX - smetr.stringWidth(s)) / 2, (resY*3/4)+20);
		s = "Use ARROW KEYS to move.";
		g2d.setFont(small);
		g2d.drawString(s, (resX - smetr.stringWidth(s)) / 2, (resY*3/4)+40);
		s = "Press ESC to exit.";
		g2d.setFont(small);
		g2d.drawString(s, (resX - smetr.stringWidth(s)) / 2, (resY*3/4)+60);
	}

	public void showScore(Graphics2D g2d) {
		Font small = new Font("Monospaced", Font.BOLD, 14);
		FontMetrics smetr = g2d.getFontMetrics(small);
		String s;

		g2d.setFont(small);
		g2d.setColor(Color.white);
		s = "SCORE: " + user.score;
		g2d.drawString(s, (resX - smetr.stringWidth(s)) / 2, (resY-50));
	}

   process KeyListener {

      while (true) {
         inni void keyChar(int key) {

            if (inGame) {
               switch (key) {
                  case KeyEvent.VK_LEFT:
                     send moveUser(GamePiece.LEFT); 
                     break;
                  case KeyEvent.VK_RIGHT:
                     send moveUser(GamePiece.RIGHT);
                     break;
                  case KeyEvent.VK_UP:
                     send moveUser(GamePiece.UP);
                     break;
                  case KeyEvent.VK_DOWN:
                     send moveUser(GamePiece.DOWN);
                     break;
                  case KeyEvent.VK_SPACE:
                     paused = !paused;
                     break;
                  case KeyEvent.VK_ESCAPE:
                     inGame = false;
                     break;
                  default:
                     break;
               }
            }
      
            else { 
               switch (key) {
                  case KeyEvent.VK_ENTER:
                     inGame = true;
                     break;
                  case KeyEvent.VK_ESCAPE:
                     runMainLoop = false;
                     break;
                  default:
                     break;
              } //end switch
           } //end else
         } //end inni
      } //end while
   } //end process (KeyListener)
}
